<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.6.0@e784128902dfe01d489c4123d69918a9f3c1eac5">
  <file src="src/LaminasRouter.php">
    <MixedArgumentTypeCoercion>
      <code>$params</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code>$options['defaults']['middleware']</code>
    </MixedArrayAccess>
    <MixedArrayOffset>
      <code>$this-&gt;allowedMethodsByPath[$params[self::METHOD_NOT_ALLOWED_ROUTE]]</code>
    </MixedArrayOffset>
    <MixedInferredReturnType>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code>$this-&gt;laminasRouter-&gt;assemble($substitutions, $options)</code>
    </MixedReturnStatement>
    <PossiblyNullArgument>
      <code>$allowedMethods</code>
      <code>$route-&gt;getAllowedMethods()</code>
    </PossiblyNullArgument>
  </file>
  <file src="test/LaminasRouter/ConfigProviderTest.php">
    <RedundantCondition>
      <code>assertIsArray</code>
    </RedundantCondition>
  </file>
  <file src="test/LaminasRouterTest.php">
    <MixedArgument>
      <code>$routesToInject</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$routesToInject</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code>$this-&gt;routesToInject</code>
    </MixedReturnStatement>
    <PossiblyFalseReference>
      <code>getMiddleware</code>
      <code>getMiddleware</code>
      <code>getMiddleware</code>
    </PossiblyFalseReference>
    <PossiblyInvalidFunctionCall>
      <code>Closure::bind($fn, $router, LaminasRouter::class)()</code>
      <code>Closure::bind(fn() =&gt; $this-&gt;laminasRouter, $router, LaminasRouter::class)()</code>
    </PossiblyInvalidFunctionCall>
    <UndefinedThisPropertyFetch>
      <code>$this-&gt;routesToInject</code>
    </UndefinedThisPropertyFetch>
  </file>
</files>
